# automatically generated by the FlatBuffers compiler, do not modify

# namespace: NetEncoding

import flatbuffers

class BoolArray(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsBoolArray(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BoolArray()
        x.Init(buf, n + offset)
        return x

    # BoolArray
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # BoolArray
    def Data(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.BoolFlags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # BoolArray
    def DataAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.BoolFlags, o)
        return 0

    # BoolArray
    def DataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def BoolArrayStart(builder): builder.StartObject(1)
def BoolArrayAddData(builder, data): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(data), 0)
def BoolArrayStartDataVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def BoolArrayEnd(builder): return builder.EndObject()
